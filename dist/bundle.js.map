{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/globals.js","webpack:///./src/sound.js","webpack:///./src/window.js","webpack:///./src/blob.js","webpack:///./src/keycodes.js","webpack:///./src/vectorOperations.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","GLOBALS","blobs","windowSize","horizontal","vertical","keyState","left","right","down","up","gameState","gravity","repulsion","drag","borderBounce","borderTeleport","player","pairwiseForceStrength","viewDistance","initialSize","initialPos","speedUp","diagonal","Math","sqrt","maxPop","appetite","G","R","minSize","borderElasticity","fps","globalOpacity","opacityIncrement","faderInterval","audioDepth","sounds","soundIndex","push","Audio","getGameWindow","document","getElementById","blob_pairwiseForceStrength","blob_Blob","[object Object]","radius","position","velocity","isPlayer","pairwiseForce","this","mass","pow","force","moving","blobDiv","createElement","classList","add","appendChild","id","move","viscosity","accelerate","teleport","updateDiv","random","newRandomDirection","toggleMoving","angle","PI","power","cos","sin","style","bottom","height","width","abs","adjustment","parentNode","removeChild","other","playerEats","weighting","newPosition","newVelocity","newRadius","deleteDiv","currentOpacity","getOpacity","play","newBlob","setOpacity","opac","opacity","a","b","fromCentre","centre","distance","getDistance","magnitude","forceTermHorizontal","forceTermVertical","keycodes","vec_a","vec_b","map","el","sub","multiply","scalar","game_windowSize","game_keyState","game_gameState","game_globalOpacity","setFader","finalOpacity","clearInterval","setInterval","sign","forEach","blob","max","min","toggleInstructions","toggle","playerDeath","addBlob","pos","x","entryPoint","getRandomBorderPosition","vel","newblob","applyFieldOfView","iteration","length","updateMovement","newBlobs","blobWander","distanceFromPlayer","biggerThan","currentForce","getForce","consume","setForce","pairwiseInteraction","j","updateWindowSize","windowDimensions","getBoundingClientRect","keyDown","e","keyCode","updatePlayerForce","keyUp","totalMomentum","totalCOM","totalMass","allBlobs","concat","currentMass","getMass","currentVelocity","getVel","currentPosition","getPos","velocityShift","positionShift","adjustVelocityBy","adjustPositionBy","zeroTotalMomentumAndPosition","keyPress","onload","addEventListener"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","window.GLOBALS = {\n  blobs: [],\n  windowSize: {\n    horizontal: 0,\n    vertical: 0,\n  },\n  keyState: {\n    left: false,\n    right: false,\n    down: false,\n    up: false,\n  },\n  gameState: {\n    gravity: false,\n    repulsion: false,\n    drag: true,\n    borderBounce: true,\n    borderTeleport: false,\n  },\n  player: null,\n  pairwiseForceStrength: 1,\n  viewDistance: 200,\n  initialSize: 14,\n  initialPos: [50, 50],\n  speedUp: 0.5,\n  diagonal: 1.0 / Math.sqrt(2),\n  maxPop: 10,\n  drag: 0.004,\n  appetite: 0.0005,\n  G: 0.5,\n  R: -0.5,\n  minSize: 10,\n  borderElasticity: 0.005,\n  fps: 50,\n  globalOpacity: 1,\n  opacityIncrement: 0.005,\n  faderInterval: null,\n};\n","const audioDepth = 5;\nlet sounds = [];\nlet soundIndex = 0;\n\nfor (let i = 0; i < audioDepth; i++) {\n  sounds.push(new Audio('sounds/bubble_pop.mp3'));\n}\n\nexport function playSound() {\n  soundIndex = (soundIndex + 1) % audioDepth;\n  sounds[soundIndex].play();\n}\n","export function getGameWindow() {\n  return document.getElementById('game-display');\n}","import { playSound } from './sound'\nimport { getGameWindow } from './window'\n\nlet {\n  windowSize,\n  keyState,\n  gameState,\n  pairwiseForceStrength,\n  speedUp,\n  diagonal,\n  drag,\n  appetite,\n  G,\n  R,\n  minSize,\n  borderElasticity,\n  globalOpacity,\n} = window.GLOBALS;\n\nexport default class Blob {\n  constructor(\n    radius,\n    position,\n    velocity = [0, 0],\n    isPlayer = false,\n    pairwiseForce = [0, 0]\n  ) {\n    this.radius = radius;\n    this.mass = Math.pow(radius, 3);\n    this.position = position;\n    this.velocity = velocity;\n    this.force = [0, 0];\n    this.isPlayer = isPlayer;\n    this.pairwiseForce = pairwiseForce;\n\n    // non player blob only\n    this.moving = false;\n\n    this.blobDiv = document.createElement('div');\n    this.blobDiv.classList.add('blob');\n    getGameWindow().appendChild(this.blobDiv);\n\n    if (isPlayer) {\n      this.blobDiv.id = 'player';\n    }\n  }\n\n  updateMovement() {\n    this.move();\n    if (gameState.drag) this.viscosity();\n    // this.hunger();\n    this.accelerate();\n    if (gameState.borderTeleport) this.teleport();\n    if (gameState.borderBounce) this.borderBounce();\n    this.updateDiv();\n    this.pairwiseForce = [0, 0];\n  }\n\n  updatePlayerForce() {\n    if (keyState.up) {\n      if (keyState.left) {\n        //up and left\n        this.force = [-diagonal, diagonal];\n      } else if (keyState.right) {\n        // up and right\n        this.force = [diagonal, diagonal];\n      } else {\n        // straight up\n        this.force = [0, 1];\n      }\n    } else if (keyState.down) {\n      if (keyState.left) {\n        // down and left\n        this.force = [-diagonal, -diagonal];\n      } else if (keyState.right) {\n        // down and right\n        this.force = [diagonal, -diagonal];\n      } else {\n        // straight down\n        this.force = [0, -1];\n      }\n    } else if (keyState.right) {\n      // right\n      this.force = [1, 0];\n    } else if (keyState.left) {\n      // left\n      this.force = [-1, 0];\n    } else {\n      this.force = [0, 0];\n    }\n  }\n\n  blobWander() {\n    // if the blob is moving it has a chance of changing direction\n    if (this.moving && Math.random() > 0.95) {\n      this.newRandomDirection();\n    }\n    // it also has a chance to start or stop moving\n    if (Math.random() > 0.993) {\n      this.toggleMoving();\n    }\n  }\n\n  newRandomDirection() {\n    let angle = Math.random() * 2 * Math.PI;\n    let power = Math.random();\n    this.force[0] = Math.cos(angle) * power;\n    this.force[1] = Math.sin(angle) * power;\n  }\n\n  toggleMoving() {\n    this.moving = !this.moving;\n  }\n\n  // definitely unnecessary but I'll levae in case\n  getAbsVel() {\n    return Math.sqrt(\n      Math.pow(this.velocity[0], 2) +\n      Math.pow(this.velocity[1], 2)\n    );\n  }\n\n  updateDiv() {\n    this.blobDiv.style.left = this.position[0] - this.radius + 'px';\n    this.blobDiv.style.bottom = this.position[1] - this.radius + 'px';\n    this.blobDiv.style.height = this.radius * 2 + 'px';\n    this.blobDiv.style.width = this.radius * 2 + 'px';\n  }\n\n  move() {\n    this.position[0] += this.velocity[0];\n    this.position[1] += this.velocity[1];\n  }\n\n  viscosity() {\n    // this.velocity[0] *= (1-drag*Math.sqrt(this.radius)*Math.pow(this.velocity[0],2));\n    // this.velocity[1] *= (1-drag*Math.sqrt(this.radius)*Math.pow(this.velocity[1],2));\n    this.velocity[0] *= 1 - drag * Math.sqrt(this.radius) * Math.abs(this.velocity[0]);\n    this.velocity[1] *= 1 - drag * Math.sqrt(this.radius) * Math.abs(this.velocity[1]);\n  }\n\n  hunger() {\n    if (this.radius > minSize) {\n      this.radius *= 1 - appetite;\n    }\n  }\n\n  getRadius() {\n    return this.radius;\n  }\n  getMass() {\n    return this.mass;\n  }\n  getVel() {\n    return this.velocity;\n  }\n  getPos() {\n    return this.position;\n  }\n  getForce() {\n    return this.force;\n  }\n  setForce(force) {\n    this.force = force;\n  }\n  adjustVelocityBy(adjustment) {\n    this.velocity[0] += adjustment[0];\n    this.velocity[1] += adjustment[1];\n  }\n  adjustPositionBy(adjustment) {\n    this.position[0] += adjustment[0];\n    this.position[1] += adjustment[1];\n  }\n\n  // accelerate the blob\n  accelerate() {\n    // this component is the blobs own movement, player or otherwise\n    if (gameState.drag) {\n      this.velocity[0] += speedUp * this.force[0];\n      this.velocity[1] += speedUp * this.force[1];\n    }\n    // this is the effect of pairwise forces on the blob\n    if (gameState.gravity || gameState.repulsion) {\n      this.velocity[0] += this.pairwiseForce[0] / this.mass;\n      this.velocity[1] += this.pairwiseForce[1] / this.mass;\n    }\n  }\n\n  borderBounce() {\n    if (this.position[0] < -this.radius) {\n      this.velocity[0] -= borderElasticity * (this.position[0] + this.radius);\n    } else if (this.position[0] > this.radius + windowSize.horizontal) {\n      this.velocity[0] -= borderElasticity * (this.position[0] - this.radius - windowSize.horizontal);\n    }\n\n    if (this.position[1] < -this.radius) {\n      this.velocity[1] -= borderElasticity * (this.position[1] + this.radius);\n    } else if (this.position[1] > this.radius + windowSize.vertical) {\n      this.velocity[1] -= borderElasticity * (this.position[1] - this.radius - windowSize.vertical);\n    }\n  }\n\n  teleport() {\n    this.position[0] = (this.position[0] + windowSize.horizontal) % windowSize.horizontal;\n    this.position[1] = (this.position[1] + windowSize.vertical) % windowSize.vertical;\n  }\n\n  deleteDiv() {\n    this.blobDiv.parentNode.removeChild(this.blobDiv);\n  }\n\n  biggerThan(other) {\n    return this.radius >= other.radius;\n  }\n\n  // given two blobs, this function returns a single blob such that mass, centre of mass and momentum are conserved\n  consume(other, playerEats = false) {\n    // relative mass\n    const weighting =\n      Math.pow(other.radius, 3) /\n      (Math.pow(this.radius, 3) + Math.pow(other.radius, 3));\n    // calculates centre of mass of both blobs\n    let newPosition = [\n      this.position[0] + (other.position[0] - this.position[0]) * weighting,\n      this.position[1] + (other.position[1] - this.position[1]) * weighting,\n    ];\n    // calculates velocity based on total momentum\n    let newVelocity = [\n      this.velocity[0] + (other.velocity[0] - this.velocity[0]) * weighting,\n      this.velocity[1] + (other.velocity[1] - this.velocity[1]) * weighting,\n    ];\n\n    // new size that conserves mass|volume\n    let newRadius = Math.pow(\n      Math.pow(this.radius, 3) + Math.pow(other.radius, 3),\n      1 / 3\n    );\n\n    // removes old divs from html\n    other.deleteDiv();\n    const currentOpacity = this.getOpacity();\n    this.deleteDiv();\n\n    playSound();\n\n    // returns new Blob\n    const newBlob = new Blob(\n      newRadius,\n      newPosition,\n      newVelocity,\n      playerEats\n    );\n\n    newBlob.setOpacity(currentOpacity);\n\n    return newBlob;\n  }\n\n  setOpacity(opac) {\n    this.blobDiv.style.opacity = opac;\n  }\n\n  getOpacity() {\n    return this.blobDiv.style.opacity;\n  }\n\n  // This function checks how far apart two blobs are, either their surfaces or their centres\n  static getDistance(a, b, fromCentre) {\n    const centre = Math.sqrt(\n      Math.pow(a.position[0] - b.position[0], 2) +\n      Math.pow(a.position[1] - b.position[1], 2)\n    );\n    return fromCentre\n      ? centre\n      : centre - (a.radius + b.radius);\n  }\n\n  // deal with all pairwise interactions between blobs, assumes player will be passed first if at all (player)\n  static pairwiseInteraction(a, b) {\n    // gravity and repulsion interaction\n    if (gameState.gravity || gameState.repulsion) {\n      const distance = Blob.getDistance(a, b, true);\n      let magnitude = pairwiseForceStrength * a.mass * b.mass / Math.pow(distance, 2);\n\n      magnitude *= gameState.gravity ? G : R;\n\n      const forceTermHorizontal = magnitude * (a.position[0] - b.position[0]) / distance;\n      const forceTermVertical = magnitude * (a.position[1] - b.position[1]) / distance;\n\n      a.pairwiseForce[0] -= forceTermHorizontal;\n      a.pairwiseForce[1] -= forceTermVertical;\n      b.pairwiseForce[0] += forceTermHorizontal;\n      b.pairwiseForce[1] += forceTermVertical;\n    }\n  }\n}\n","export default {\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  g: 71,\n  r: 82,\n  f: 70,\n  t: 84,\n  b: 66,\n  z: 90,\n  v: 86,\n  a: 65,\n  space: 32,\n};\n","export const add = (vec_a, vec_b) => vec_a.map((el, i) => el + vec_b[i]);\nexport const sub = (vec_a, vec_b) => vec_a.map((el, i) => el - vec_b[i]);\nexport const multiply = (scalar, vec_a) => vec_a.map(el => el * scalar);\nexport const product = (vec_a, vec_b) => vec_a.reduce((total, el, i) => total + el * vec_b[i]);\nexport const mag = vec_a => Math.sqrt(product(vec_a, vec_a));\n","import Blob from './blob';\nimport { getGameWindow } from './window';\nimport keys from './keycodes';\nimport {\n  add,\n  sub,\n  product,\n  multiply,\n  mag\n} from './vectorOperations';\n\nlet {\n  blobs,\n  windowSize,\n  keyState,\n  gameState,\n  player,\n  viewDistance,\n  initialSize,\n  initialPos,\n  maxPop,\n  fps,\n  opacityIncrement,\n  globalOpacity,\n  faderInterval,\n} = window.GLOBALS;\n\nexport default function start() {\n  updateWindowSize();\n\n  document.addEventListener('keydown', keyDown, false);\n  document.addEventListener('keyup', keyUp, false);\n  document.addEventListener('keypress', keyPress, false);\n\n  window.addEventListener('resize', updateWindowSize, false);\n\n  toggleInstructions();\n\n  setInterval(iteration, 1000 / fps);\n}\n\nfunction setFader(finalOpacity) {\n  clearInterval(faderInterval);\n  faderInterval = setInterval(incrementOpacity, 1000 / fps);\n\n  function incrementOpacity() {\n    const sign = Math.sign(finalOpacity - globalOpacity);\n    globalOpacity = globalOpacity + sign * opacityIncrement;\n\n    blobs.forEach(blob => {\n      blob.setOpacity(\n        sign\n          ? Math.max(globalOpacity, blob.getOpacity())\n          : Math.min(globalOpacity, blob.getOpacity())\n      );\n    });\n\n    if (globalOpacity == finalOpacity) clearInterval(faderInterval);\n  }\n}\n\nfunction createPlayer() {\n  player = new Blob(\n    initialSize,\n    [...initialPos],\n    [0, 0],\n    true\n  );\n}\n\nfunction toggleInstructions() {\n  document.getElementById('instructions').classList.toggle('hidden');\n}\n\nwindow.iteration = function() {\n  repopulate();\n\n  if (player) {\n    player.updateMovement();\n    viewDistance = initialSize * 10 + player.radius * 5;\n  }\n\n  // Each time the array is iterated through a new array is created,\n  // This is because when I tried to use array.filter the resultant array was still the same length and contained nulls\n  let newBlobs = [];\n\n  for (let i = 0; i < blobs.length; i++) {\n    if (!blobs[i]) continue;\n\n    blobs[i].blobWander();\n    blobs[i].updateMovement();\n\n    if (player) {\n      let distanceFromPlayer = Blob.getDistance(blobs[i], player, false);\n      if (distanceFromPlayer < 0) {\n        if (player.biggerThan(blobs[i])) {\n          const currentForce = player.getForce();\n          player = player.consume(blobs[i], true);\n          player.setForce(currentForce);\n          blobs[i] = null;\n          continue;\n        } else {\n          blobs[i] = blobs[i].consume(player);\n          blobs[i].setOpacity(1);\n          playerDeath();\n        }\n      } else {\n        // apply opacity to the blob so that it gradually comes into view only near the player\n        blobs[i].setOpacity(applyFieldOfView(distanceFromPlayer));\n        Blob.pairwiseInteraction(player, blobs[i]);\n      }\n    }\n\n    for (let j = i + 1; j < blobs.length; j++) {\n      if (!blobs[j]) continue;\n      if (Blob.getDistance(blobs[i], blobs[j], false) < 0) {\n        blobs[i] = blobs[i].biggerThan(blobs[j])\n          ? blobs[i].consume(blobs[j])\n          : blobs[j].consume(blobs[i]);\n        blobs[j] = null;\n      } else {\n        Blob.pairwiseInteraction(blobs[i], blobs[j]);\n      }\n    }\n    newBlobs.push(blobs[i]);\n  }\n\n  blobs = newBlobs;\n};\n\nfunction playerDeath() {\n  player = null;\n  toggleInstructions();\n  setFader(1);\n}\n\nfunction repopulate() {\n  if (blobs.length < maxPop && Math.random() > 0.99) addBlob();\n}\n\nfunction addBlob(\n  radius = getCreationRadius(),\n  pos = getRandomBorderPosition(),\n  vel = getRandomStartingVelocity()\n) {\n  let newblob = new Blob(\n    radius,\n    pos,\n    vel,\n    false\n  );\n  blobs.push(newblob);\n}\n\nfunction getRandomBorderPosition() {\n  const x = Math.random() * 4;\n  return (x < 1) ? entryPoint = [0, windowSize.vertical * x] :\n    (x < 2) ? [windowSize.horizontal * (x - 1), 0] :\n    (x < 3) ? [windowSize.horizontal, windowSize.vertical * (x - 2)] :\n    [windowSize.horizontal * (x - 3), 0]\n}\n\nfunction getRandomStartingVelocity() {\n  return [Math.random() * 4 - 2, Math.random() * 4 - 2];\n}\n\nfunction getCreationRadius() {\n  return 0.8 * initialSize * Math.pow(5, Math.pow(Math.random(), 2));\n}\n\nwindow.updateWindowSize = function() {\n  let windowDimensions = getGameWindow().getBoundingClientRect();\n  windowSize.horizontal = windowDimensions.width;\n  windowSize.vertical = windowDimensions.height;\n  initialPos = [windowSize.horizontal / 2, windowSize.vertical / 2];\n};\n\nwindow.keyDown = function(e) {\n  switch (e.keyCode) {\n    case keys.up:\n      keyState.up = true;\n      break;\n    case keys.down:\n      keyState.down = true;\n      break;\n    case keys.left:\n      keyState.left = true;\n      break;\n    case keys.right:\n      keyState.right = true;\n      break;\n    case keys.g:\n      gameState.gravity = true;\n      gameState.repulsion = false;\n      break;\n    case keys.r:\n      gameState.gravity = false;\n      gameState.repulsion = true;\n      break;\n    default:\n  }\n  if (player) player.updatePlayerForce();\n};\n\nwindow.keyUp = function(e) {\n  switch (e.keyCode) {\n    case keys.right:\n      keyState.right = false;\n      break;\n    case keys.left:\n      keyState.left = false;\n      break;\n    case keys.up:\n      keyState.up = false;\n      break;\n    case keys.down:\n      keyState.down = false;\n      break;\n    case keys.g:\n      gameState.gravity = false;\n      pairwiseForceStrength = 0;\n      break;\n    case keys.r:\n      gameState.repulsion = false;\n      pairwiseForceStrength = 0;\n      break;\n    case keys.v:\n      gameState.drag = !gameState.drag;\n      break;\n    case keys.t:\n      gameState.borderTeleport = !gameState.borderTeleport;\n      gameState.borderBounce = !gameState.borderTeleport;\n      break;\n    case keys.z:\n      zeroTotalMomentumAndPosition();\n      break;\n    case keys.a:\n      addBlob();\n      break;\n    default:\n  }\n  if (player) player.updatePlayerForce();\n};\n\nwindow.keyPress = function(e) {\n  switch (e.keyCode) {\n    case keys.space:\n      if (!player) {\n        createPlayer();\n        toggleInstructions();\n        clearInterval(faderInterval);\n        setFader(0);\n      }\n      break;\n    default:\n  }\n};\n\nfunction applyFieldOfView(distance) {\n  return Math.max(1 - distance / viewDistance, globalOpacity);\n}\n\nfunction zeroTotalMomentumAndPosition() {\n  let totalMomentum = [0, 0],\n    totalCOM = [0, 0],\n    totalMass = 0,\n    allBlobs = player\n      ? blobs.concat([player])\n      : blobs;\n  // sum momentum, COM and mass\n  for (let i = 0; i < allBlobs.length; i++) {\n    let currentMass = allBlobs[i].getMass(),\n      currentVelocity = allBlobs[i].getVel(),\n      currentPosition = allBlobs[i].getPos();\n    totalMass += currentMass;\n    totalMomentum = add(\n      totalMomentum,\n      multiply(\n        currentMass,\n        currentVelocity\n      )\n    );\n    totalCOM = add(\n      totalCOM,\n      multiply(\n        currentMass,\n        currentPosition\n      )\n    );\n  }\n  let velocityShift = multiply(\n    -1/totalMass,\n    totalMomentum\n  );\n  let positionShift = sub(\n    initialPos,\n    multiply(\n      1/totalMass,\n      totalCOM\n    )\n  );\n\n  // adjust all blobs\n  for (let i = 0; i < allBlobs.length; i++) {\n    allBlobs[i].adjustVelocityBy(velocityShift);\n    allBlobs[i].adjustPositionBy(positionShift);\n  }\n}\n","import './globals';\nimport start from './game';\nwindow.onload = start;\n"],"sourceRoot":""}